# BULLETPROOF Railway Nixpacks Configuration
# This configuration FORCES Railway to use uvicorn only
# DO NOT MODIFY - Any changes may cause Railway to use wrong server

# Force Python provider and disable auto-detection
[providers]
python = "3.11"

# Set working directory to backend subdirectory
# This eliminates the need for 'cd backend' commands
[phases.build]
workDir = "backend"

# Setup phase - install dependencies
[phases.setup]
workDir = "backend"
cmds = [
  "echo 'Installing Python dependencies...'",
  "pip install --upgrade pip",
  "pip install --no-cache-dir -r requirements.txt",
  "echo 'Dependencies installed successfully'"
]

# Start command - EXPLICIT uvicorn with full path and error handling
# Using exec to ensure proper signal handling
[start]
workDir = "backend"
cmd = "exec python -m uvicorn main:app --host 0.0.0.0 --port $PORT --workers 1 --log-level debug --access-log --timeout-keep-alive 30"

# Environment variables to force uvicorn usage
[variables]
PYTHONUNBUFFERED = "1"
ENVIRONMENT = "production"
# Force nixpacks to use uvicorn
NIXPACKS_PYTHON_WSGI_MODULE = ""
# Disable auto-detection of production servers
DISABLE_COLLECTSTATIC = "1"
# Force uvicorn as the server - reduced for stability
WEB_CONCURRENCY = "1"
# Explicitly disable alternative servers
RAILWAY_NO_GUNICORN = "true"
# Python path to ensure imports work
PYTHONPATH = "/app/backend"
# Debugging
DEBUG = "false"
# Let Railway set PORT dynamically (Railway provides this automatically)
# CRITICAL: Railway Public Networking port MUST match the PORT env var
# Railway will automatically set PORT to match the exposed service port